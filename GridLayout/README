    The QGridLayout class lays out widgets in a grid.
    QGridLayout takes the space made available to it (by its parent layout or by the parentWidget()),
divides it up into rows and columns, and puts each widget it manages into the correct cell.
    Columns and rows behave identically; we will discuss columns, but there are equivalent functions for rows.
Each column has a minimum width and a stretch factor. The minimum width is the greatest of that set using
setColumnMinimumWidth() and the minimum width of each widget in that column. The stretch factor is set
using setColumnStretch() and determines how much of the available space the column will get over and above
its necessary minimum.
    Normally, each managed widget or layout is put into a cell of its own using addWidget(). It is also possible for
a widget to occupy multiple cells using the row and column spanning overloads of addItem() and addWidget().
If you do this, QGridLayout will guess how to distribute the size over the columns/rows (based on the stretch
factors).
    To remove a widget from a layout, call removeWidget(). Calling QWidget::hide() on a widget also effectively
removes the widget from the layout until QWidget::show() is called.
    Note that the columns and rows are not equally wide or tall. If you want two columns to have the same width,
you must set their minimum widths and stretch factors to be the same yourself. You do this using setColumnMinimumWidth()
and setColumnStretch().
    If the QGridLayout is not the top-level layout (i.e. does not manage all of the widget's area and children), you
must add it to its parent layout when you create it, but before you do anything with it. The normal way to add a
layout is by calling addLayout() on the parent layout.
    Once you have added your layout you can start putting widgets and other layouts into the cells of your grid
layout using addWidget(), addItem(), and addLayout().
    QGridLayout also includes two margin widths: the contents margin and the spacing(). The contents margin
is the width of the reserved space along each of the QGridLayout's four sides. The spacing() is the width of the
automatically allocated spacing between neighboring boxes.
    The default contents margin values are provided by the style. The default value Qt styles specify is 9 for child
widgets and 11 for windows. The spacing defaults to the same as the margin width for a top-level layout, or to
the same as the parent layout.

大致翻译：
       GridLayout将组建摆放在一个栅栏中。
       GridLayout将父组件或父布局划分来使用，将它分隔为行和列，并且将它管理的部件放入正确
的位置。
        列和行的表现行为是一样的，接下来我们讨论列，行的功能是和列一样的。每一列有一个最小
的宽度和一个伸展因子。最小宽度是setColumnMinimumWidth()设置的值和该列中部件的最小宽度两
者中的最大一个，伸展因子使用setColumnStretch()函数设置并且伸展因子决定列在它的最小宽度上
将获得多少的可用空间。
        通常，每个被管理的空间或者布局使用addWidget()方法放入cell中。一个空间占据多行或者多列，
通过重载addItem()和addWidget()。如果你这么做，QGridLayout将通过伸展因子预测行和列的大小。
        从布局中去掉一个部件使用removeWidget()，同样可以使用QWidget::hide()方法删除，使用Qwidget::show（）
恢复。
        注意各个列和各个行没有相同的高或宽（即不同的列可能有不同的宽度），如果你想要两列有
相同的宽度则必须设置他们的最小宽度和伸展因子保持一致。是用setColumnMinimumWidth()和setColumnStretch()。
        如果QGridLayout不是顶层布局，那么你必须在它被创建时添加它的父布局。一般使用addLayou()
来添加它到父部件。
        一旦你添加了布局，你可以使用addWidget()，addItem()，和addLayout()向其添加部件或布局。
        QGridLayout仍然包括两个margin宽度：content margin 和 spacing()。content margin是沿着QGridLayout
四边界已保留的空间，spacing是相邻盒子间自动分配的空间。
         默认的content margin有风格提供。Qt的风格指明的默认值是子部件的默认值是9，windows的
默认值是11。spacing和顶层的layout的margin width相同，或者和父布局相同。

总结：
        QGridLayout是一个类似与QFormLayout的布局，但是有所不同，QGridLayout可以指明将部件
放在第几行第几列，并且部件是可以跨越一定的长度和宽度的。跨越长度或宽度的默认值为1，该
1表示的部件的本身的大小。当为0时则部件不显示。

wrap在计算机中是换行的意思。
